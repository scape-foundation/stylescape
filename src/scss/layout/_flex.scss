
@use "../variables" as *;
@use "../mixins" as *;
// https://css-tricks.com/snippets/css/a-guide-to-flexbox/
// https://gist.github.com/Farmatique/d88491ca4a8c75f3b39df6c71852bf5a

// ============================================================================
// Layout | Flex
// ============================================================================
// Provides utility mixins and classes for working with CSS Flexbox layouts.


// Flexbox Mixin:
// Simplifies the use of flexbox with a single mixin.

// @mixin flexbox($justify-content: center, $align-items: center, $flex-direction: row) {
//     display: flex;
//     justify-content: $justify-content;
//     align-items: $align-items;
//     flex-direction: $flex-direction;
// }

// .flex-center {
//     @include flexbox();
// }


// Flex | Parents
// -----------------------------------------------------------------------

// Flex

/// Mixin for applying basic flexbox properties to a container.
/// @group Flexbox
@mixin flex {
    -webkit-display: flex;
    -moz-display: flex;
    -ms-display: flex;
    -o-display: flex;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
.flex { @include flex; }


// Flex | Direction
// ============================================================================
// flex-direction: row | row-reverse | column | column-reverse;

/// Mixin for setting the flex direction to column.
/// @group Flexbox
@mixin flex_col {
    @include flex;
    -webkit-flex-direction: column;
    -moz-box-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
}

/// Mixin for setting the flex direction to column-reverse.
/// @group Flexbox
@mixin flex_col_rev {
    @include flex;
    -webkit-flex-direction: column-reverse;
    -moz-box-direction: column-reverse;
    -ms-flex-direction: column-reverse;
    flex-direction: column-reverse;
}

/// Mixin for setting the flex direction to row.
/// @group Flexbox
@mixin flex_row {
    @include flex;
    -webkit-flex-direction: row;
    -moz-box-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
}

/// Mixin for setting the flex direction to row-reverse.
/// @group Flexbox
@mixin flex_row_rev {
    @include flex;
    -webkit-flex-direction: row-reverse;
    -moz-box-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
}


// -webkit-box-direction: normal | reverse;



.flex_col                 { @include flex_col; }
.flex_col_rev             { @include flex_col_rev; }
.flex_row                 { @include flex_row; }
.flex_row_rev             { @include flex_row_rev; }


// @mixin flex_column {
//   display:        flex;
//   flex-direction: column;
//   }
// @mixin flex_row {
//     display:        flex;
//     flex-direction: row;
// }


// Flex Direction
// flex-wrap: nowrap | wrap | wrap-reverse;

/// Mixin for enabling flex-wrap.
/// @group Flexbox
@mixin flex_wrap          { flex-wrap: wrap; }

/// Mixin for enabling reverse flex-wrap.
/// @group Flexbox
@mixin flex_wrap_rev      { flex-wrap: wrap-reverse; }

.flex_wrap                { @include flex_wrap; }
.flex_wrap_rev            { @include flex_wrap_rev; }

// .  flex-flow: column wrap;



// Flex | Children
// -----------------------------------------------------------------------


// Order


// -webkit-order: 1;
// order: 1;

/// Mixin for setting the order of flex items.
/// @param {Number} $val - The order value.
/// @group Flexbox
@mixin flex_order($val) {
  -webkit-box-ordinal-group:  $val;  
  -moz-box-ordinal-group:     $val;     
  -ms-flex-order:              $val;     
  -webkit-order:              $val;  
  order:                      $val;
}

// Sizing adjustments

/// Mixin for adjusting the flex-grow, flex-shrink, and flex-basis properties.
/// @param {Number} $val - The value for the flex property.
/// @group Flexbox
@mixin flex_size($val) {
  -webkit-box-flex:           $val;
  -moz-box-flex:              $val;
  -webkit-flex:               $val;
  -ms-flex:                   $val;
  flex:                       $val;
}

/// Mixin for setting the flex-basis property.
/// @param {String} $val - The value for the flex-basis property.
/// @group Flexbox
@mixin flex_basis($val) {
  flex-basis:                 $val;
}

// -webkit-flex-grow: 1;
// flex-grow: 1;

/// Mixin for setting the flex-grow property.
/// @param {Number} $val - The value for the flex-grow property.
/// @group Flexbox
@mixin flex_grow($val) {
  flex-grow:                  $val;
}

/// Mixin for setting the flex-shrink property.
/// @param {Number} $val - The value for the flex-shrink property.
/// @group Flexbox
@mixin flex_shrink($val) {
  flex-shrink:                $val;
}

/// Mixin for disabling flex-grow and flex-shrink, keeping the item fixed.
/// @group Flexbox
@mixin flex_keep {
  @include flex_grow(0);    // do not grow   - initial value: 0
  @include flex_shrink(0);  // do not shrink - initial value: 1
  // flex-grow: 0;     /* do not grow   - initial value: 0 */
  // flex-shrink: 0;   /* do not shrink - initial value: 1 */
}


// Align Self
// align-self: auto | flex-start | flex-end | center | baseline | stretch;

// -webkit-align-self: flex-start;
// -moz-align-self: flex-start;
// -ms-align-self: flex-start;
// -o-align-self: flex-start;
// align-self: flex-start;


/// Mixin for aligning a flex item along the cross axis.
/// @group Flexbox
@mixin align_self_auto {
  align-self: auto;
}

/// Mixin for stretching a flex item along the cross axis.
/// @group Flexbox
@mixin align_self_stretch {
  align-self: stretch;
}

/// Mixin for aligning a flex item at the start along the cross axis.
/// @group Flexbox
@mixin align_self_start {
  align-self: flex-start;
}

/// Mixin for aligning a flex item at the end along the cross axis.
/// @group Flexbox
@mixin align_self_end {
  align-self: flex-end;
}

/// Mixin for centering a flex item along the cross axis.
/// @group Flexbox
@mixin align_self_center {
  align-self: center;
}

/// Mixin for aligning a flex item based on its baseline along the cross axis.
/// @group Flexbox
@mixin align_self_baseline {
  align-self: baseline;
}


.align_self_auto              { @include align_self_auto; }
.align_self_stretch           { @include align_self_stretch; }
.align_self_start             { @include align_self_start; }
.align_self_end               { @include align_self_end; }
.align_self_center            { @include align_self_center; }
.align_self_baseline          { @include align_self_baseline; }


// -ms-flex-wrap: wrap;
// -webkit-flex-wrap: wrap;
// flex-wrap: wrap;
